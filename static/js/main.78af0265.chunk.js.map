{"version":3,"sources":["components/list-item.js","components/list.js","components/modal.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","state","clicked","handleClick","setState","item","this","props","onClick","value","React","Component","List","addToTop","list","id","uuid","length","addToBottom","className","map","key","Modal","closeModal","event","target","contains","modalBtnRef","current","modalRef","createRef","document","body","addEventListener","removeEventListener","ref","initialList","App","showModal","isModalOpen","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAEqBA,E,2MACjBC,MAAQ,CACJC,QAAS,G,EAEbC,YAAc,WACV,EAAKC,SAAS,CACVF,QAAS,EAAKD,MAAMC,QAAU,K,wEAG5B,IACCG,EAAQC,KAAKC,MAAbF,KACP,OACI,yBAAKG,QAASF,KAAKH,aACdE,EAAKI,MADV,eAC6BH,KAAKL,MAAMC,a,GAbdQ,IAAMC,WCEvBC,E,YACjB,WAAYL,GAAQ,IAAD,8BACf,4CAAMA,KAMVM,SAAW,WACP,EAAKT,SAAS,CACVU,KAAK,CACD,CAACC,GAAIC,MAAQP,MAAM,SAAD,OAAW,EAAKR,MAAMa,KAAKG,UAD7C,mBAEG,EAAKhB,MAAMa,UAXP,EAcnBI,YAAc,WACV,EAAKd,SAAS,CACVU,KAAK,GAAD,mBACG,EAAKb,MAAMa,MADd,CAEA,CAACC,GAAIC,MAAQP,MAAM,SAAD,OAAW,EAAKR,MAAMa,KAAKG,cAhBrD,EAAKhB,MAAQ,CACTa,KAAMP,EAAMO,MAHD,E,sEAqBT,IACCA,EAAQR,KAAKL,MAAba,KACH,OACI,yBAAKK,UAAU,QACX,6BACI,4BAAQX,QAASF,KAAKO,UAAtB,cACA,4BAAQL,QAASF,KAAKY,aAAtB,kBAEJ,6BACKJ,EAAKM,KAAK,SAAAf,GAAI,OACX,kBAAC,EAAD,CAAUgB,IAAKhB,EAAKU,GAAIV,KAAMA,a,GAhCxBK,IAAMC,WCDnBW,E,YACjB,WAAYf,GAAQ,IAAD,8BACf,4CAAMA,KAWVgB,WAAa,SAACC,GACPA,EAAMC,OAAOC,SAAS,EAAKnB,MAAMoB,YAAYC,UAAYJ,EAAMC,OAAOC,SAAS,EAAKG,SAASD,UAC5F,EAAKrB,MAAMgB,cAZf,EAAKM,SAAWnB,IAAMoB,YAFP,E,iFAKfC,SAASC,KAAKC,iBAAiB,QAAS3B,KAAKiB,c,6CAI7CQ,SAASC,KAAKE,oBAAoB,QAAS5B,KAAKiB,c,+BAUhD,OACI,yBAAKJ,UAAU,QAAQgB,IAAK7B,KAAKuB,UAC7B,kBAAC,EAAD,CAAMf,KAAMR,KAAKC,MAAM6B,mB,GAtBJ1B,IAAMC,WCEnCyB,EAAc,CAChB,CACIrB,GAAIC,MACJP,MAAO,WACR,CACCM,GAAIC,MACJP,MAAO,WACR,CACCM,GAAIC,MACJP,MAAO,WACR,CACCM,GAAIC,MACJP,MAAO,YA2CA4B,E,YAtCX,aAAe,IAAD,8BACV,+CAMJC,UAAY,WACJ,EAAKrC,MAAMsC,aACX,EAAKnC,SAAS,CACVmC,aAAa,KAVX,EAedhB,WAAa,WACT,EAAKnB,SAAS,CACVmC,aAAa,KAfjB,EAAKtC,MAAQ,CACTsC,aAAa,GAEjB,EAAKZ,YAAcjB,IAAMoB,YALf,E,sEAsBd,OACI,yBAAKX,UAAU,WACX,4BACIX,QAASF,KAAKgC,UAAWH,IAAK7B,KAAKqB,aADvC,sBAECrB,KAAKL,MAAMsC,aACZ,kBAAC,EAAD,CACIZ,YAAarB,KAAKqB,YAClBR,UAAU,QACViB,YAAaA,EACbb,WAAYjB,KAAKiB,kB,GAhCfb,IAAMC,WCTJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASf,SAASgB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.78af0265.chunk.js","sourcesContent":["import React from 'react'\n\nexport default class ListItem extends React.Component {\n    state = {\n        clicked: 0\n    }\n    handleClick = () => {\n        this.setState({\n            clicked: this.state.clicked + 1\n        })\n    }\n    render() {\n        const {item} = this.props\n        return(\n            <div onClick={this.handleClick}>\n                {item.value} - clicked: {this.state.clicked}\n            </div>\n        )\n    }\n}","import React from 'react'\nimport ListItem from \"./list-item\";\nimport uuid from 'uuid'\n\nexport default class List extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            list: props.list\n        }\n    }\n\n    addToTop = () => {\n        this.setState({\n            list: [\n                {id: uuid(), value: `index ${this.state.list.length}`},\n                ...this.state.list\n            ]})\n    }\n    addToBottom = () => {\n        this.setState({\n            list: [\n                ...this.state.list,\n                {id: uuid(), value: `index ${this.state.list.length}`}\n            ]})\n    }\n    render() {\n        const {list} = this.state\n            return(\n                <div className='list'>\n                    <div>\n                        <button onClick={this.addToTop}>Add to top</button>\n                        <button onClick={this.addToBottom}>Add to bottom</button>\n                    </div>\n                    <div>\n                        {list.map( item => (\n                            <ListItem key={item.id} item={item} />\n                        ))}\n                    </div>\n\n                </div>\n                )\n    }\n}","import React from 'react';\nimport List from \"./list\";\n\nexport default class Modal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.modalRef = React.createRef()\n    }\n    componentDidMount() {\n        document.body.addEventListener('click', this.closeModal)\n    }\n\n    componentWillUnmount() {\n        document.body.removeEventListener('click', this.closeModal)\n    }\n\n    closeModal = (event) => {\n        if(event.target.contains(this.props.modalBtnRef.current) && event.target.contains(this.modalRef.current)) {\n            this.props.closeModal()\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" ref={this.modalRef}>\n                <List list={this.props.initialList}/>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport uuid from 'uuid'\nimport Modal from \"./components/modal\";\n\nconst initialList = [\n    {\n        id: uuid(),\n        value: 'index 0'\n    }, {\n        id: uuid(),\n        value: 'index 1'\n    }, {\n        id: uuid(),\n        value: 'index 2'\n    }, {\n        id: uuid(),\n        value: 'index 3'\n    }\n]\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            isModalOpen: false\n        }\n        this.modalBtnRef = React.createRef()\n    }\n    showModal = () => {\n        if(!this.state.isModalOpen) {\n            this.setState({\n                isModalOpen: true\n            })\n        }\n    }\n\n    closeModal = () => {\n        this.setState({\n            isModalOpen: false\n        })\n    }\n\n  render() {\n    return (\n        <div className=\"wrapper\">\n            <button\n                onClick={this.showModal} ref={this.modalBtnRef}>Show list in modal</button>\n            {this.state.isModalOpen &&\n            <Modal\n                modalBtnRef={this.modalBtnRef}\n                className=\"modal\"\n                initialList={initialList}\n                closeModal={this.closeModal}/>\n            }\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}